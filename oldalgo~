#include <bits/stdc++.h>
using namespace std;
int maximum=0;


void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2)
    {
        if (L[i] >= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
 	merge(arr, l, m, r);
    }
}


void clique(int u[], int n, int size,int e[10][10])
{   
	int i,flag=0,mini=0,cnt=0;
	for(i=0;i<n;i++)
	{
        cout<<u[i];
        //cout<<endl;
		if(u[i]==1)
		{
            
			cnt++;
			flag=1;
		}
	}
    cout<<endl;
	if(flag==0)
	{
        //cout<<"hey";
		if(size>maximum)
		{
			maximum=size;
            cout<<maximum<<"ans";
		}
		return;
	}
    //cout<<cnt;
	while(cnt!=0)
	{
		if((size+cnt)<=maximum)
			return;
		for(i=0;i<n;i++)
		{
			if(u[i]==1)
			{
				mini=i;
				break;
			}
		}
		u[mini]=0;
		cnt--;
        //cout<<cnt<<"heyaaa"<<endl;
		for(i=0;i<n;i++)
		{
			if(u[i]==1&&e[mini][i]==1)
				u[i]=1;
            else
                u[i]=0;
		}
        
		clique(u,n,size+1,e);
	}
	return; 

}

void old(int v,int e[10][10])
{
	int i;
    //cout<<v<<endl;
	int vertex[10]={0};
	for(i=0;i<v;i++)
		vertex[i]=1;
   // cout<<"hi";
	clique(vertex,v,0,e);
    return;
}

int main()
{
    int n,e[10][10],src,dest,edge,i,j;
	cout<<"enter number of vertices in the graph"<<endl;
	cin>>n;
	cout<<"enter number of edges"<<endl;
	cin>>edge;
    for(i=0;i<n;i++)
    {
      for(j=0;j<n;j++)
      {
        e[i][j]==0;
      }
    }
	for(i=0;i<edge;i++)
	{
		cout<<"enter source vertex"<<endl;
		cin>>src;
		cout<<"enter destination vertex"<<endl;
		cin>>dest;
		e[src][dest]=1;
		e[dest][src]=1;
		d[src]++;
		d[dest]++;
	}
	mergeSort()
	old(n,e);
    //<<maximum<<endl;
	return(0);
}

